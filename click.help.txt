Help on package click:

NAME
    click

FILE
    c:\programdata\anaconda2\lib\site-packages\click\__init__.py

DESCRIPTION
    click
    ~~~~~
    
    Click is a simple Python module that wraps the stdlib's optparse to make
    writing command line scripts fun.  Unlike other modules, it's based around
    a simple API that does not come with too much magic and is composable.
    
    In case optparse ever gets removed from the stdlib, it will be shipped by
    this module.
    
    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.

PACKAGE CONTENTS
    _bashcomplete
    _compat
    _termui_impl
    _textwrap
    _unicodefun
    _winconsole
    core
    decorators
    exceptions
    formatting
    globals
    parser
    termui
    testing
    types
    utils

CLASSES
    __builtin__.object
        click.core.BaseCommand
            click.core.Command
                click.core.MultiCommand
                    click.core.CommandCollection
                    click.core.Group
        click.core.Context
        click.core.Parameter
            click.core.Argument
            click.core.Option
        click.formatting.HelpFormatter
        click.parser.OptionParser
        click.types.ParamType
            click.types.Choice
            click.types.File
            click.types.Path
    click.types.CompositeParamType(click.types.ParamType)
        click.types.Tuple
    click.types.IntParamType(click.types.ParamType)
        click.types.IntRange
    exceptions.Exception(exceptions.BaseException)
        click.exceptions.ClickException
            click.exceptions.FileError
            click.exceptions.UsageError
                click.exceptions.BadArgumentUsage
                click.exceptions.BadOptionUsage
                click.exceptions.BadParameter
                    click.exceptions.MissingParameter
                click.exceptions.NoSuchOption
    exceptions.RuntimeError(exceptions.StandardError)
        click.exceptions.Abort
    
    class Abort(exceptions.RuntimeError)
     |  An internal signalling exception that signals Click to abort.
     |  
     |  Method resolution order:
     |      Abort
     |      exceptions.RuntimeError
     |      exceptions.StandardError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.RuntimeError:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.RuntimeError:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class Argument(Parameter)
     |  Arguments are positional parameters to a command.  They generally
     |  provide fewer features than options but can have infinite ``nargs``
     |  and are required by default.
     |  
     |  All parameters are passed onwards to the parameter constructor.
     |  
     |  Method resolution order:
     |      Argument
     |      Parameter
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, param_decls, required=None, **attrs)
     |  
     |  add_to_parser(self, parser, ctx)
     |  
     |  get_usage_pieces(self, ctx)
     |  
     |  make_metavar(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  human_readable_name
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  param_type_name = 'argument'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Parameter:
     |  
     |  consume_value(self, ctx, opts)
     |  
     |  full_process_value(self, ctx, value)
     |  
     |  get_default(self, ctx)
     |      Given a context variable this calculates the default value.
     |  
     |  get_help_record(self, ctx)
     |  
     |  handle_parse_result(self, ctx, opts, args)
     |  
     |  process_value(self, ctx, value)
     |      Given a value and context this runs the logic to convert the
     |      value as necessary.
     |  
     |  resolve_envvar_value(self, ctx)
     |  
     |  type_cast_value(self, ctx, value)
     |      Given a value this runs it properly through the type system.
     |      This automatically handles things like `nargs` and `multiple` as
     |      well as composite types.
     |  
     |  value_from_envvar(self, ctx)
     |  
     |  value_is_missing(self, value)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Parameter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class BadArgumentUsage(UsageError)
     |  Raised if an argument is generally supplied but the use of the argument
     |  was incorrect.  This is for instance raised if the number of values
     |  for an argument is not correct.
     |  
     |  .. versionadded:: 6.0
     |  
     |  Method resolution order:
     |      BadArgumentUsage
     |      UsageError
     |      ClickException
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, message, ctx=None)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UsageError:
     |  
     |  show(self, file=None)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from UsageError:
     |  
     |  exit_code = 2
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ClickException:
     |  
     |  format_message(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ClickException:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class BadOptionUsage(UsageError)
     |  Raised if an option is generally supplied but the use of the option
     |  was incorrect.  This is for instance raised if the number of arguments
     |  for an option is not correct.
     |  
     |  .. versionadded:: 4.0
     |  
     |  Method resolution order:
     |      BadOptionUsage
     |      UsageError
     |      ClickException
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, message, ctx=None)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UsageError:
     |  
     |  show(self, file=None)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from UsageError:
     |  
     |  exit_code = 2
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ClickException:
     |  
     |  format_message(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ClickException:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class BadParameter(UsageError)
     |  An exception that formats out a standardized error message for a
     |  bad parameter.  This is useful when thrown from a callback or type as
     |  Click will attach contextual information to it (for instance, which
     |  parameter it is).
     |  
     |  .. versionadded:: 2.0
     |  
     |  :param param: the parameter object that caused this error.  This can
     |                be left out, and Click will attach this info itself
     |                if possible.
     |  :param param_hint: a string that shows up as parameter name.  This
     |                     can be used as alternative to `param` in cases
     |                     where custom validation should happen.  If it is
     |                     a string it's used as such, if it's a list then
     |                     each item is quoted and separated.
     |  
     |  Method resolution order:
     |      BadParameter
     |      UsageError
     |      ClickException
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, message, ctx=None, param=None, param_hint=None)
     |  
     |  format_message(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UsageError:
     |  
     |  show(self, file=None)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from UsageError:
     |  
     |  exit_code = 2
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ClickException:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class BaseCommand(__builtin__.object)
     |  The base command implements the minimal API contract of commands.
     |  Most code will never use this as it does not implement a lot of useful
     |  functionality but it can act as the direct subclass of alternative
     |  parsing methods that do not depend on the Click parser.
     |  
     |  For instance, this can be used to bridge Click and other systems like
     |  argparse or docopt.
     |  
     |  Because base commands do not implement a lot of the API that other
     |  parts of Click take for granted, they are not supported for all
     |  operations.  For instance, they cannot be used with the decorators
     |  usually and they have no built-in callback system.
     |  
     |  .. versionchanged:: 2.0
     |     Added the `context_settings` parameter.
     |  
     |  :param name: the name of the command to use unless a group overrides it.
     |  :param context_settings: an optional dictionary with defaults that are
     |                           passed to the context object.
     |  
     |  Methods defined here:
     |  
     |  __call__(self, *args, **kwargs)
     |      Alias for :meth:`main`.
     |  
     |  __init__(self, name, context_settings=None)
     |  
     |  get_help(self, ctx)
     |  
     |  get_usage(self, ctx)
     |  
     |  invoke(self, ctx)
     |      Given a context, this invokes the command.  The default
     |      implementation is raising a not implemented error.
     |  
     |  main(self, args=None, prog_name=None, complete_var=None, standalone_mode=True, **extra)
     |      This is the way to invoke a script with all the bells and
     |      whistles as a command line application.  This will always terminate
     |      the application after a call.  If this is not wanted, ``SystemExit``
     |      needs to be caught.
     |      
     |      This method is also available by directly calling the instance of
     |      a :class:`Command`.
     |      
     |      .. versionadded:: 3.0
     |         Added the `standalone_mode` flag to control the standalone mode.
     |      
     |      :param args: the arguments that should be used for parsing.  If not
     |                   provided, ``sys.argv[1:]`` is used.
     |      :param prog_name: the program name that should be used.  By default
     |                        the program name is constructed by taking the file
     |                        name from ``sys.argv[0]``.
     |      :param complete_var: the environment variable that controls the
     |                           bash completion support.  The default is
     |                           ``"_<prog_name>_COMPLETE"`` with prog name in
     |                           uppercase.
     |      :param standalone_mode: the default behavior is to invoke the script
     |                              in standalone mode.  Click will then
     |                              handle exceptions and convert them into
     |                              error messages and the function will never
     |                              return but shut down the interpreter.  If
     |                              this is set to `False` they will be
     |                              propagated to the caller and the return
     |                              value of this function is the return value
     |                              of :meth:`invoke`.
     |      :param extra: extra keyword arguments are forwarded to the context
     |                    constructor.  See :class:`Context` for more information.
     |  
     |  make_context(self, info_name, args, parent=None, **extra)
     |      This function when given an info name and arguments will kick
     |      off the parsing and create a new :class:`Context`.  It does not
     |      invoke the actual command callback though.
     |      
     |      :param info_name: the info name for this invokation.  Generally this
     |                        is the most descriptive name for the script or
     |                        command.  For the toplevel script it's usually
     |                        the name of the script, for commands below it it's
     |                        the name of the script.
     |      :param args: the arguments to parse as list of strings.
     |      :param parent: the parent context if available.
     |      :param extra: extra keyword arguments forwarded to the context
     |                    constructor.
     |  
     |  parse_args(self, ctx, args)
     |      Given a context and a list of arguments this creates the parser
     |      and parses the arguments, then modifies the context as necessary.
     |      This is automatically invoked by :meth:`make_context`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  allow_extra_args = False
     |  
     |  allow_interspersed_args = True
     |  
     |  ignore_unknown_options = False
    
    class Choice(ParamType)
     |  The choice type allows a value to be checked against a fixed set of
     |  supported values.  All of these values have to be strings.
     |  
     |  See :ref:`choice-opts` for an example.
     |  
     |  Method resolution order:
     |      Choice
     |      ParamType
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, choices)
     |  
     |  __repr__(self)
     |  
     |  convert(self, value, param, ctx)
     |  
     |  get_metavar(self, param)
     |  
     |  get_missing_message(self, param)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  name = 'choice'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ParamType:
     |  
     |  __call__(self, value, param=None, ctx=None)
     |  
     |  fail(self, message, param=None, ctx=None)
     |      Helper method to fail with an invalid value message.
     |  
     |  split_envvar_value(self, rv)
     |      Given a value from an environment variable this splits it up
     |      into small chunks depending on the defined envvar list splitter.
     |      
     |      If the splitter is set to `None`, which means that whitespace splits,
     |      then leading and trailing whitespace is ignored.  Otherwise, leading
     |      and trailing splitters usually lead to empty items being included.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ParamType:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ParamType:
     |  
     |  envvar_list_splitter = None
     |  
     |  is_composite = False
    
    class ClickException(exceptions.Exception)
     |  An exception that Click can handle and show to the user.
     |  
     |  Method resolution order:
     |      ClickException
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, message)
     |  
     |  format_message(self)
     |  
     |  show(self, file=None)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  exit_code = 1
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class Command(BaseCommand)
     |  Commands are the basic building block of command line interfaces in
     |  Click.  A basic command handles command line parsing and might dispatch
     |  more parsing to commands nested below it.
     |  
     |  .. versionchanged:: 2.0
     |     Added the `context_settings` parameter.
     |  
     |  :param name: the name of the command to use unless a group overrides it.
     |  :param context_settings: an optional dictionary with defaults that are
     |                           passed to the context object.
     |  :param callback: the callback to invoke.  This is optional.
     |  :param params: the parameters to register with this command.  This can
     |                 be either :class:`Option` or :class:`Argument` objects.
     |  :param help: the help string to use for this command.
     |  :param epilog: like the help string but it's printed at the end of the
     |                 help page after everything else.
     |  :param short_help: the short help to use for this command.  This is
     |                     shown on the command listing of the parent command.
     |  :param add_help_option: by default each command registers a ``--help``
     |                          option.  This can be disabled by this parameter.
     |  
     |  Method resolution order:
     |      Command
     |      BaseCommand
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name, context_settings=None, callback=None, params=None, help=None, epilog=None, short_help=None, options_metavar='[OPTIONS]', add_help_option=True)
     |  
     |  collect_usage_pieces(self, ctx)
     |      Returns all the pieces that go into the usage line and returns
     |      it as a list of strings.
     |  
     |  format_epilog(self, ctx, formatter)
     |      Writes the epilog into the formatter if it exists.
     |  
     |  format_help(self, ctx, formatter)
     |      Writes the help into the formatter if it exists.
     |      
     |      This calls into the following methods:
     |      
     |      -   :meth:`format_usage`
     |      -   :meth:`format_help_text`
     |      -   :meth:`format_options`
     |      -   :meth:`format_epilog`
     |  
     |  format_help_text(self, ctx, formatter)
     |      Writes the help text to the formatter if it exists.
     |  
     |  format_options(self, ctx, formatter)
     |      Writes all the options into the formatter if they exist.
     |  
     |  format_usage(self, ctx, formatter)
     |      Writes the usage line into the formatter.
     |  
     |  get_help(self, ctx)
     |      Formats the help into a string and returns it.  This creates a
     |      formatter and will call into the following formatting methods:
     |  
     |  get_help_option(self, ctx)
     |      Returns the help option object.
     |  
     |  get_help_option_names(self, ctx)
     |      Returns the names for the help option.
     |  
     |  get_params(self, ctx)
     |  
     |  get_usage(self, ctx)
     |  
     |  invoke(self, ctx)
     |      Given a context, this invokes the attached callback (if it exists)
     |      in the right way.
     |  
     |  make_parser(self, ctx)
     |      Creates the underlying option parser for this command.
     |  
     |  parse_args(self, ctx, args)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseCommand:
     |  
     |  __call__(self, *args, **kwargs)
     |      Alias for :meth:`main`.
     |  
     |  main(self, args=None, prog_name=None, complete_var=None, standalone_mode=True, **extra)
     |      This is the way to invoke a script with all the bells and
     |      whistles as a command line application.  This will always terminate
     |      the application after a call.  If this is not wanted, ``SystemExit``
     |      needs to be caught.
     |      
     |      This method is also available by directly calling the instance of
     |      a :class:`Command`.
     |      
     |      .. versionadded:: 3.0
     |         Added the `standalone_mode` flag to control the standalone mode.
     |      
     |      :param args: the arguments that should be used for parsing.  If not
     |                   provided, ``sys.argv[1:]`` is used.
     |      :param prog_name: the program name that should be used.  By default
     |                        the program name is constructed by taking the file
     |                        name from ``sys.argv[0]``.
     |      :param complete_var: the environment variable that controls the
     |                           bash completion support.  The default is
     |                           ``"_<prog_name>_COMPLETE"`` with prog name in
     |                           uppercase.
     |      :param standalone_mode: the default behavior is to invoke the script
     |                              in standalone mode.  Click will then
     |                              handle exceptions and convert them into
     |                              error messages and the function will never
     |                              return but shut down the interpreter.  If
     |                              this is set to `False` they will be
     |                              propagated to the caller and the return
     |                              value of this function is the return value
     |                              of :meth:`invoke`.
     |      :param extra: extra keyword arguments are forwarded to the context
     |                    constructor.  See :class:`Context` for more information.
     |  
     |  make_context(self, info_name, args, parent=None, **extra)
     |      This function when given an info name and arguments will kick
     |      off the parsing and create a new :class:`Context`.  It does not
     |      invoke the actual command callback though.
     |      
     |      :param info_name: the info name for this invokation.  Generally this
     |                        is the most descriptive name for the script or
     |                        command.  For the toplevel script it's usually
     |                        the name of the script, for commands below it it's
     |                        the name of the script.
     |      :param args: the arguments to parse as list of strings.
     |      :param parent: the parent context if available.
     |      :param extra: extra keyword arguments forwarded to the context
     |                    constructor.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseCommand:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseCommand:
     |  
     |  allow_extra_args = False
     |  
     |  allow_interspersed_args = True
     |  
     |  ignore_unknown_options = False
    
    class CommandCollection(MultiCommand)
     |  A command collection is a multi command that merges multiple multi
     |  commands together into one.  This is a straightforward implementation
     |  that accepts a list of different multi commands as sources and
     |  provides all the commands for each of them.
     |  
     |  Method resolution order:
     |      CommandCollection
     |      MultiCommand
     |      Command
     |      BaseCommand
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name=None, sources=None, **attrs)
     |  
     |  add_source(self, multi_cmd)
     |      Adds a new multi command to the chain dispatcher.
     |  
     |  get_command(self, ctx, cmd_name)
     |  
     |  list_commands(self, ctx)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MultiCommand:
     |  
     |  collect_usage_pieces(self, ctx)
     |  
     |  format_commands(self, ctx, formatter)
     |      Extra format methods for multi methods that adds all the commands
     |      after the options.
     |  
     |  format_options(self, ctx, formatter)
     |  
     |  invoke(self, ctx)
     |  
     |  parse_args(self, ctx, args)
     |  
     |  resolve_command(self, ctx, args)
     |  
     |  resultcallback(self, replace=False)
     |      Adds a result callback to the chain command.  By default if a
     |      result callback is already registered this will chain them but
     |      this can be disabled with the `replace` parameter.  The result
     |      callback is invoked with the return value of the subcommand
     |      (or the list of return values from all subcommands if chaining
     |      is enabled) as well as the parameters as they would be passed
     |      to the main callback.
     |      
     |      Example::
     |      
     |          @click.group()
     |          @click.option('-i', '--input', default=23)
     |          def cli(input):
     |              return 42
     |      
     |          @cli.resultcallback()
     |          def process_result(result, input):
     |              return result + input
     |      
     |      .. versionadded:: 3.0
     |      
     |      :param replace: if set to `True` an already existing result
     |                      callback will be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MultiCommand:
     |  
     |  allow_extra_args = True
     |  
     |  allow_interspersed_args = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Command:
     |  
     |  format_epilog(self, ctx, formatter)
     |      Writes the epilog into the formatter if it exists.
     |  
     |  format_help(self, ctx, formatter)
     |      Writes the help into the formatter if it exists.
     |      
     |      This calls into the following methods:
     |      
     |      -   :meth:`format_usage`
     |      -   :meth:`format_help_text`
     |      -   :meth:`format_options`
     |      -   :meth:`format_epilog`
     |  
     |  format_help_text(self, ctx, formatter)
     |      Writes the help text to the formatter if it exists.
     |  
     |  format_usage(self, ctx, formatter)
     |      Writes the usage line into the formatter.
     |  
     |  get_help(self, ctx)
     |      Formats the help into a string and returns it.  This creates a
     |      formatter and will call into the following formatting methods:
     |  
     |  get_help_option(self, ctx)
     |      Returns the help option object.
     |  
     |  get_help_option_names(self, ctx)
     |      Returns the names for the help option.
     |  
     |  get_params(self, ctx)
     |  
     |  get_usage(self, ctx)
     |  
     |  make_parser(self, ctx)
     |      Creates the underlying option parser for this command.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseCommand:
     |  
     |  __call__(self, *args, **kwargs)
     |      Alias for :meth:`main`.
     |  
     |  main(self, args=None, prog_name=None, complete_var=None, standalone_mode=True, **extra)
     |      This is the way to invoke a script with all the bells and
     |      whistles as a command line application.  This will always terminate
     |      the application after a call.  If this is not wanted, ``SystemExit``
     |      needs to be caught.
     |      
     |      This method is also available by directly calling the instance of
     |      a :class:`Command`.
     |      
     |      .. versionadded:: 3.0
     |         Added the `standalone_mode` flag to control the standalone mode.
     |      
     |      :param args: the arguments that should be used for parsing.  If not
     |                   provided, ``sys.argv[1:]`` is used.
     |      :param prog_name: the program name that should be used.  By default
     |                        the program name is constructed by taking the file
     |                        name from ``sys.argv[0]``.
     |      :param complete_var: the environment variable that controls the
     |                           bash completion support.  The default is
     |                           ``"_<prog_name>_COMPLETE"`` with prog name in
     |                           uppercase.
     |      :param standalone_mode: the default behavior is to invoke the script
     |                              in standalone mode.  Click will then
     |                              handle exceptions and convert them into
     |                              error messages and the function will never
     |                              return but shut down the interpreter.  If
     |                              this is set to `False` they will be
     |                              propagated to the caller and the return
     |                              value of this function is the return value
     |                              of :meth:`invoke`.
     |      :param extra: extra keyword arguments are forwarded to the context
     |                    constructor.  See :class:`Context` for more information.
     |  
     |  make_context(self, info_name, args, parent=None, **extra)
     |      This function when given an info name and arguments will kick
     |      off the parsing and create a new :class:`Context`.  It does not
     |      invoke the actual command callback though.
     |      
     |      :param info_name: the info name for this invokation.  Generally this
     |                        is the most descriptive name for the script or
     |                        command.  For the toplevel script it's usually
     |                        the name of the script, for commands below it it's
     |                        the name of the script.
     |      :param args: the arguments to parse as list of strings.
     |      :param parent: the parent context if available.
     |      :param extra: extra keyword arguments forwarded to the context
     |                    constructor.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseCommand:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseCommand:
     |  
     |  ignore_unknown_options = False
    
    class Context(__builtin__.object)
     |  The context is a special internal object that holds state relevant
     |  for the script execution at every single level.  It's normally invisible
     |  to commands unless they opt-in to getting access to it.
     |  
     |  The context is useful as it can pass internal objects around and can
     |  control special execution features such as reading data from
     |  environment variables.
     |  
     |  A context can be used as context manager in which case it will call
     |  :meth:`close` on teardown.
     |  
     |  .. versionadded:: 2.0
     |     Added the `resilient_parsing`, `help_option_names`,
     |     `token_normalize_func` parameters.
     |  
     |  .. versionadded:: 3.0
     |     Added the `allow_extra_args` and `allow_interspersed_args`
     |     parameters.
     |  
     |  .. versionadded:: 4.0
     |     Added the `color`, `ignore_unknown_options`, and
     |     `max_content_width` parameters.
     |  
     |  :param command: the command class for this context.
     |  :param parent: the parent context.
     |  :param info_name: the info name for this invocation.  Generally this
     |                    is the most descriptive name for the script or
     |                    command.  For the toplevel script it is usually
     |                    the name of the script, for commands below it it's
     |                    the name of the script.
     |  :param obj: an arbitrary object of user data.
     |  :param auto_envvar_prefix: the prefix to use for automatic environment
     |                             variables.  If this is `None` then reading
     |                             from environment variables is disabled.  This
     |                             does not affect manually set environment
     |                             variables which are always read.
     |  :param default_map: a dictionary (like object) with default values
     |                      for parameters.
     |  :param terminal_width: the width of the terminal.  The default is
     |                         inherit from parent context.  If no context
     |                         defines the terminal width then auto
     |                         detection will be applied.
     |  :param max_content_width: the maximum width for content rendered by
     |                            Click (this currently only affects help
     |                            pages).  This defaults to 80 characters if
     |                            not overridden.  In other words: even if the
     |                            terminal is larger than that, Click will not
     |                            format things wider than 80 characters by
     |                            default.  In addition to that, formatters might
     |                            add some safety mapping on the right.
     |  :param resilient_parsing: if this flag is enabled then Click will
     |                            parse without any interactivity or callback
     |                            invocation.  This is useful for implementing
     |                            things such as completion support.
     |  :param allow_extra_args: if this is set to `True` then extra arguments
     |                           at the end will not raise an error and will be
     |                           kept on the context.  The default is to inherit
     |                           from the command.
     |  :param allow_interspersed_args: if this is set to `False` then options
     |                                  and arguments cannot be mixed.  The
     |                                  default is to inherit from the command.
     |  :param ignore_unknown_options: instructs click to ignore options it does
     |                                 not know and keeps them for later
     |                                 processing.
     |  :param help_option_names: optionally a list of strings that define how
     |                            the default help parameter is named.  The
     |                            default is ``['--help']``.
     |  :param token_normalize_func: an optional function that is used to
     |                               normalize tokens (options, choices,
     |                               etc.).  This for instance can be used to
     |                               implement case insensitive behavior.
     |  :param color: controls if the terminal supports ANSI colors or not.  The
     |                default is autodetection.  This is only needed if ANSI
     |                codes are used in texts that Click prints which is by
     |                default not the case.  This for instance would affect
     |                help output.
     |  
     |  Methods defined here:
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, exc_type, exc_value, tb)
     |  
     |  __init__(self, command, parent=None, info_name=None, obj=None, auto_envvar_prefix=None, default_map=None, terminal_width=None, max_content_width=None, resilient_parsing=False, allow_extra_args=None, allow_interspersed_args=None, ignore_unknown_options=None, help_option_names=None, token_normalize_func=None, color=None)
     |  
     |  abort(self)
     |      Aborts the script.
     |  
     |  call_on_close(self, f)
     |      This decorator remembers a function as callback that should be
     |      executed when the context tears down.  This is most useful to bind
     |      resource handling to the script execution.  For instance, file objects
     |      opened by the :class:`File` type will register their close callbacks
     |      here.
     |      
     |      :param f: the function to execute on teardown.
     |  
     |  close(self)
     |      Invokes all close callbacks.
     |  
     |  ensure_object(self, object_type)
     |      Like :meth:`find_object` but sets the innermost object to a
     |      new instance of `object_type` if it does not exist.
     |  
     |  exit(self, code=0)
     |      Exits the application with a given exit code.
     |  
     |  fail(self, message)
     |      Aborts the execution of the program with a specific error
     |      message.
     |      
     |      :param message: the error message to fail with.
     |  
     |  find_object(self, object_type)
     |      Finds the closest object of a given type.
     |  
     |  find_root(self)
     |      Finds the outermost context.
     |  
     |  forward(*args, **kwargs)
     |      Similar to :meth:`invoke` but fills in default keyword
     |      arguments from the current context if the other command expects
     |      it.  This cannot invoke callbacks directly, only other commands.
     |  
     |  get_help(self)
     |      Helper method to get formatted help page for the current
     |      context and command.
     |  
     |  get_usage(self)
     |      Helper method to get formatted usage string for the current
     |      context and command.
     |  
     |  invoke(*args, **kwargs)
     |      Invokes a command callback in exactly the way it expects.  There
     |      are two ways to invoke this method:
     |      
     |      1.  the first argument can be a callback and all other arguments and
     |          keyword arguments are forwarded directly to the function.
     |      2.  the first argument is a click command object.  In that case all
     |          arguments are forwarded as well but proper click parameters
     |          (options and click arguments) must be keyword arguments and Click
     |          will fill in defaults.
     |      
     |      Note that before Click 3.2 keyword arguments were not properly filled
     |      in against the intention of this code and no context was created.  For
     |      more information about this change and why it was done in a bugfix
     |      release see :ref:`upgrade-to-3.2`.
     |  
     |  lookup_default(self, name)
     |      Looks up the default for a parameter name.  This by default
     |      looks into the :attr:`default_map` if available.
     |  
     |  make_formatter(self)
     |      Creates the formatter for the help and usage output.
     |  
     |  scope(*args, **kwds)
     |      This helper method can be used with the context object to promote
     |      it to the current thread local (see :func:`get_current_context`).
     |      The default behavior of this is to invoke the cleanup functions which
     |      can be disabled by setting `cleanup` to `False`.  The cleanup
     |      functions are typically used for things such as closing file handles.
     |      
     |      If the cleanup is intended the context object can also be directly
     |      used as a context manager.
     |      
     |      Example usage::
     |      
     |          with ctx.scope():
     |              assert get_current_context() is ctx
     |      
     |      This is equivalent::
     |      
     |          with ctx:
     |              assert get_current_context() is ctx
     |      
     |      .. versionadded:: 5.0
     |      
     |      :param cleanup: controls if the cleanup functions should be run or
     |                      not.  The default is to run these functions.  In
     |                      some situations the context only wants to be
     |                      temporarily pushed in which case this can be disabled.
     |                      Nested pushes automatically defer the cleanup.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  command_path
     |      The computed command path.  This is used for the ``usage``
     |      information on the help page.  It's automatically created by
     |      combining the info names of the chain of contexts to the root.
     |  
     |  meta
     |      This is a dictionary which is shared with all the contexts
     |      that are nested.  It exists so that click utiltiies can store some
     |      state here if they need to.  It is however the responsibility of
     |      that code to manage this dictionary well.
     |      
     |      The keys are supposed to be unique dotted strings.  For instance
     |      module paths are a good choice for it.  What is stored in there is
     |      irrelevant for the operation of click.  However what is important is
     |      that code that places data here adheres to the general semantics of
     |      the system.
     |      
     |      Example usage::
     |      
     |          LANG_KEY = __name__ + '.lang'
     |      
     |          def set_language(value):
     |              ctx = get_current_context()
     |              ctx.meta[LANG_KEY] = value
     |      
     |          def get_language():
     |              return get_current_context().meta.get(LANG_KEY, 'en_US')
     |      
     |      .. versionadded:: 5.0
    
    class File(ParamType)
     |  Declares a parameter to be a file for reading or writing.  The file
     |  is automatically closed once the context tears down (after the command
     |  finished working).
     |  
     |  Files can be opened for reading or writing.  The special value ``-``
     |  indicates stdin or stdout depending on the mode.
     |  
     |  By default, the file is opened for reading text data, but it can also be
     |  opened in binary mode or for writing.  The encoding parameter can be used
     |  to force a specific encoding.
     |  
     |  The `lazy` flag controls if the file should be opened immediately or
     |  upon first IO.  The default is to be non lazy for standard input and
     |  output streams as well as files opened for reading, lazy otherwise.
     |  
     |  Starting with Click 2.0, files can also be opened atomically in which
     |  case all writes go into a separate file in the same folder and upon
     |  completion the file will be moved over to the original location.  This
     |  is useful if a file regularly read by other users is modified.
     |  
     |  See :ref:`file-args` for more information.
     |  
     |  Method resolution order:
     |      File
     |      ParamType
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, mode='r', encoding=None, errors='strict', lazy=None, atomic=False)
     |  
     |  convert(self, value, param, ctx)
     |  
     |  resolve_lazy_flag(self, value)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  envvar_list_splitter = ';'
     |  
     |  name = 'filename'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ParamType:
     |  
     |  __call__(self, value, param=None, ctx=None)
     |  
     |  fail(self, message, param=None, ctx=None)
     |      Helper method to fail with an invalid value message.
     |  
     |  get_metavar(self, param)
     |      Returns the metavar default for this param if it provides one.
     |  
     |  get_missing_message(self, param)
     |      Optionally might return extra information about a missing
     |      parameter.
     |      
     |      .. versionadded:: 2.0
     |  
     |  split_envvar_value(self, rv)
     |      Given a value from an environment variable this splits it up
     |      into small chunks depending on the defined envvar list splitter.
     |      
     |      If the splitter is set to `None`, which means that whitespace splits,
     |      then leading and trailing whitespace is ignored.  Otherwise, leading
     |      and trailing splitters usually lead to empty items being included.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ParamType:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ParamType:
     |  
     |  is_composite = False
    
    class FileError(ClickException)
     |  Raised if a file cannot be opened.
     |  
     |  Method resolution order:
     |      FileError
     |      ClickException
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, filename, hint=None)
     |  
     |  format_message(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ClickException:
     |  
     |  show(self, file=None)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ClickException:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ClickException:
     |  
     |  exit_code = 1
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class Group(MultiCommand)
     |  A group allows a command to have subcommands attached.  This is the
     |  most common way to implement nesting in Click.
     |  
     |  :param commands: a dictionary of commands.
     |  
     |  Method resolution order:
     |      Group
     |      MultiCommand
     |      Command
     |      BaseCommand
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name=None, commands=None, **attrs)
     |  
     |  add_command(self, cmd, name=None)
     |      Registers another :class:`Command` with this group.  If the name
     |      is not provided, the name of the command is used.
     |  
     |  command(self, *args, **kwargs)
     |      A shortcut decorator for declaring and attaching a command to
     |      the group.  This takes the same arguments as :func:`command` but
     |      immediately registers the created command with this instance by
     |      calling into :meth:`add_command`.
     |  
     |  get_command(self, ctx, cmd_name)
     |  
     |  group(self, *args, **kwargs)
     |      A shortcut decorator for declaring and attaching a group to
     |      the group.  This takes the same arguments as :func:`group` but
     |      immediately registers the created command with this instance by
     |      calling into :meth:`add_command`.
     |  
     |  list_commands(self, ctx)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MultiCommand:
     |  
     |  collect_usage_pieces(self, ctx)
     |  
     |  format_commands(self, ctx, formatter)
     |      Extra format methods for multi methods that adds all the commands
     |      after the options.
     |  
     |  format_options(self, ctx, formatter)
     |  
     |  invoke(self, ctx)
     |  
     |  parse_args(self, ctx, args)
     |  
     |  resolve_command(self, ctx, args)
     |  
     |  resultcallback(self, replace=False)
     |      Adds a result callback to the chain command.  By default if a
     |      result callback is already registered this will chain them but
     |      this can be disabled with the `replace` parameter.  The result
     |      callback is invoked with the return value of the subcommand
     |      (or the list of return values from all subcommands if chaining
     |      is enabled) as well as the parameters as they would be passed
     |      to the main callback.
     |      
     |      Example::
     |      
     |          @click.group()
     |          @click.option('-i', '--input', default=23)
     |          def cli(input):
     |              return 42
     |      
     |          @cli.resultcallback()
     |          def process_result(result, input):
     |              return result + input
     |      
     |      .. versionadded:: 3.0
     |      
     |      :param replace: if set to `True` an already existing result
     |                      callback will be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MultiCommand:
     |  
     |  allow_extra_args = True
     |  
     |  allow_interspersed_args = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Command:
     |  
     |  format_epilog(self, ctx, formatter)
     |      Writes the epilog into the formatter if it exists.
     |  
     |  format_help(self, ctx, formatter)
     |      Writes the help into the formatter if it exists.
     |      
     |      This calls into the following methods:
     |      
     |      -   :meth:`format_usage`
     |      -   :meth:`format_help_text`
     |      -   :meth:`format_options`
     |      -   :meth:`format_epilog`
     |  
     |  format_help_text(self, ctx, formatter)
     |      Writes the help text to the formatter if it exists.
     |  
     |  format_usage(self, ctx, formatter)
     |      Writes the usage line into the formatter.
     |  
     |  get_help(self, ctx)
     |      Formats the help into a string and returns it.  This creates a
     |      formatter and will call into the following formatting methods:
     |  
     |  get_help_option(self, ctx)
     |      Returns the help option object.
     |  
     |  get_help_option_names(self, ctx)
     |      Returns the names for the help option.
     |  
     |  get_params(self, ctx)
     |  
     |  get_usage(self, ctx)
     |  
     |  make_parser(self, ctx)
     |      Creates the underlying option parser for this command.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseCommand:
     |  
     |  __call__(self, *args, **kwargs)
     |      Alias for :meth:`main`.
     |  
     |  main(self, args=None, prog_name=None, complete_var=None, standalone_mode=True, **extra)
     |      This is the way to invoke a script with all the bells and
     |      whistles as a command line application.  This will always terminate
     |      the application after a call.  If this is not wanted, ``SystemExit``
     |      needs to be caught.
     |      
     |      This method is also available by directly calling the instance of
     |      a :class:`Command`.
     |      
     |      .. versionadded:: 3.0
     |         Added the `standalone_mode` flag to control the standalone mode.
     |      
     |      :param args: the arguments that should be used for parsing.  If not
     |                   provided, ``sys.argv[1:]`` is used.
     |      :param prog_name: the program name that should be used.  By default
     |                        the program name is constructed by taking the file
     |                        name from ``sys.argv[0]``.
     |      :param complete_var: the environment variable that controls the
     |                           bash completion support.  The default is
     |                           ``"_<prog_name>_COMPLETE"`` with prog name in
     |                           uppercase.
     |      :param standalone_mode: the default behavior is to invoke the script
     |                              in standalone mode.  Click will then
     |                              handle exceptions and convert them into
     |                              error messages and the function will never
     |                              return but shut down the interpreter.  If
     |                              this is set to `False` they will be
     |                              propagated to the caller and the return
     |                              value of this function is the return value
     |                              of :meth:`invoke`.
     |      :param extra: extra keyword arguments are forwarded to the context
     |                    constructor.  See :class:`Context` for more information.
     |  
     |  make_context(self, info_name, args, parent=None, **extra)
     |      This function when given an info name and arguments will kick
     |      off the parsing and create a new :class:`Context`.  It does not
     |      invoke the actual command callback though.
     |      
     |      :param info_name: the info name for this invokation.  Generally this
     |                        is the most descriptive name for the script or
     |                        command.  For the toplevel script it's usually
     |                        the name of the script, for commands below it it's
     |                        the name of the script.
     |      :param args: the arguments to parse as list of strings.
     |      :param parent: the parent context if available.
     |      :param extra: extra keyword arguments forwarded to the context
     |                    constructor.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseCommand:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseCommand:
     |  
     |  ignore_unknown_options = False
    
    class HelpFormatter(__builtin__.object)
     |  This class helps with formatting text-based help pages.  It's
     |  usually just needed for very special internal cases, but it's also
     |  exposed so that developers can write their own fancy outputs.
     |  
     |  At present, it always writes into memory.
     |  
     |  :param indent_increment: the additional increment for each level.
     |  :param width: the width for the text.  This defaults to the terminal
     |                width clamped to a maximum of 78.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, indent_increment=2, width=None, max_width=None)
     |  
     |  dedent(self)
     |      Decreases the indentation.
     |  
     |  getvalue(self)
     |      Returns the buffer contents.
     |  
     |  indent(self)
     |      Increases the indentation.
     |  
     |  indentation(*args, **kwds)
     |      A context manager that increases the indentation.
     |  
     |  section(*args, **kwds)
     |      Helpful context manager that writes a paragraph, a heading,
     |      and the indents.
     |      
     |      :param name: the section name that is written as heading.
     |  
     |  write(self, string)
     |      Writes a unicode string into the internal buffer.
     |  
     |  write_dl(self, rows, col_max=30, col_spacing=2)
     |      Writes a definition list into the buffer.  This is how options
     |      and commands are usually formatted.
     |      
     |      :param rows: a list of two item tuples for the terms and values.
     |      :param col_max: the maximum width of the first column.
     |      :param col_spacing: the number of spaces between the first and
     |                          second column.
     |  
     |  write_heading(self, heading)
     |      Writes a heading into the buffer.
     |  
     |  write_paragraph(self)
     |      Writes a paragraph into the buffer.
     |  
     |  write_text(self, text)
     |      Writes re-indented text into the buffer.  This rewraps and
     |      preserves paragraphs.
     |  
     |  write_usage(self, prog, args='', prefix='Usage: ')
     |      Writes a usage line into the buffer.
     |      
     |      :param prog: the program name.
     |      :param args: whitespace separated list of arguments.
     |      :param prefix: the prefix for the first line.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class IntRange(IntParamType)
     |  A parameter that works similar to :data:`click.INT` but restricts
     |  the value to fit into a range.  The default behavior is to fail if the
     |  value falls outside the range, but it can also be silently clamped
     |  between the two edges.
     |  
     |  See :ref:`ranges` for an example.
     |  
     |  Method resolution order:
     |      IntRange
     |      IntParamType
     |      ParamType
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, min=None, max=None, clamp=False)
     |  
     |  __repr__(self)
     |  
     |  convert(self, value, param, ctx)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  name = 'integer range'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ParamType:
     |  
     |  __call__(self, value, param=None, ctx=None)
     |  
     |  fail(self, message, param=None, ctx=None)
     |      Helper method to fail with an invalid value message.
     |  
     |  get_metavar(self, param)
     |      Returns the metavar default for this param if it provides one.
     |  
     |  get_missing_message(self, param)
     |      Optionally might return extra information about a missing
     |      parameter.
     |      
     |      .. versionadded:: 2.0
     |  
     |  split_envvar_value(self, rv)
     |      Given a value from an environment variable this splits it up
     |      into small chunks depending on the defined envvar list splitter.
     |      
     |      If the splitter is set to `None`, which means that whitespace splits,
     |      then leading and trailing whitespace is ignored.  Otherwise, leading
     |      and trailing splitters usually lead to empty items being included.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ParamType:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ParamType:
     |  
     |  envvar_list_splitter = None
     |  
     |  is_composite = False
    
    class MissingParameter(BadParameter)
     |  Raised if click required an option or argument but it was not
     |  provided when invoking the script.
     |  
     |  .. versionadded:: 4.0
     |  
     |  :param param_type: a string that indicates the type of the parameter.
     |                     The default is to inherit the parameter type from
     |                     the given `param`.  Valid values are ``'parameter'``,
     |                     ``'option'`` or ``'argument'``.
     |  
     |  Method resolution order:
     |      MissingParameter
     |      BadParameter
     |      UsageError
     |      ClickException
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, message=None, ctx=None, param=None, param_hint=None, param_type=None)
     |  
     |  format_message(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UsageError:
     |  
     |  show(self, file=None)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from UsageError:
     |  
     |  exit_code = 2
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ClickException:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class MultiCommand(Command)
     |  A multi command is the basic implementation of a command that
     |  dispatches to subcommands.  The most common version is the
     |  :class:`Group`.
     |  
     |  :param invoke_without_command: this controls how the multi command itself
     |                                 is invoked.  By default it's only invoked
     |                                 if a subcommand is provided.
     |  :param no_args_is_help: this controls what happens if no arguments are
     |                          provided.  This option is enabled by default if
     |                          `invoke_without_command` is disabled or disabled
     |                          if it's enabled.  If enabled this will add
     |                          ``--help`` as argument if no arguments are
     |                          passed.
     |  :param subcommand_metavar: the string that is used in the documentation
     |                             to indicate the subcommand place.
     |  :param chain: if this is set to `True` chaining of multiple subcommands
     |                is enabled.  This restricts the form of commands in that
     |                they cannot have optional arguments but it allows
     |                multiple commands to be chained together.
     |  :param result_callback: the result callback to attach to this multi
     |                          command.
     |  
     |  Method resolution order:
     |      MultiCommand
     |      Command
     |      BaseCommand
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name=None, invoke_without_command=False, no_args_is_help=None, subcommand_metavar=None, chain=False, result_callback=None, **attrs)
     |  
     |  collect_usage_pieces(self, ctx)
     |  
     |  format_commands(self, ctx, formatter)
     |      Extra format methods for multi methods that adds all the commands
     |      after the options.
     |  
     |  format_options(self, ctx, formatter)
     |  
     |  get_command(self, ctx, cmd_name)
     |      Given a context and a command name, this returns a
     |      :class:`Command` object if it exists or returns `None`.
     |  
     |  invoke(self, ctx)
     |  
     |  list_commands(self, ctx)
     |      Returns a list of subcommand names in the order they should
     |      appear.
     |  
     |  parse_args(self, ctx, args)
     |  
     |  resolve_command(self, ctx, args)
     |  
     |  resultcallback(self, replace=False)
     |      Adds a result callback to the chain command.  By default if a
     |      result callback is already registered this will chain them but
     |      this can be disabled with the `replace` parameter.  The result
     |      callback is invoked with the return value of the subcommand
     |      (or the list of return values from all subcommands if chaining
     |      is enabled) as well as the parameters as they would be passed
     |      to the main callback.
     |      
     |      Example::
     |      
     |          @click.group()
     |          @click.option('-i', '--input', default=23)
     |          def cli(input):
     |              return 42
     |      
     |          @cli.resultcallback()
     |          def process_result(result, input):
     |              return result + input
     |      
     |      .. versionadded:: 3.0
     |      
     |      :param replace: if set to `True` an already existing result
     |                      callback will be removed.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  allow_extra_args = True
     |  
     |  allow_interspersed_args = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Command:
     |  
     |  format_epilog(self, ctx, formatter)
     |      Writes the epilog into the formatter if it exists.
     |  
     |  format_help(self, ctx, formatter)
     |      Writes the help into the formatter if it exists.
     |      
     |      This calls into the following methods:
     |      
     |      -   :meth:`format_usage`
     |      -   :meth:`format_help_text`
     |      -   :meth:`format_options`
     |      -   :meth:`format_epilog`
     |  
     |  format_help_text(self, ctx, formatter)
     |      Writes the help text to the formatter if it exists.
     |  
     |  format_usage(self, ctx, formatter)
     |      Writes the usage line into the formatter.
     |  
     |  get_help(self, ctx)
     |      Formats the help into a string and returns it.  This creates a
     |      formatter and will call into the following formatting methods:
     |  
     |  get_help_option(self, ctx)
     |      Returns the help option object.
     |  
     |  get_help_option_names(self, ctx)
     |      Returns the names for the help option.
     |  
     |  get_params(self, ctx)
     |  
     |  get_usage(self, ctx)
     |  
     |  make_parser(self, ctx)
     |      Creates the underlying option parser for this command.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseCommand:
     |  
     |  __call__(self, *args, **kwargs)
     |      Alias for :meth:`main`.
     |  
     |  main(self, args=None, prog_name=None, complete_var=None, standalone_mode=True, **extra)
     |      This is the way to invoke a script with all the bells and
     |      whistles as a command line application.  This will always terminate
     |      the application after a call.  If this is not wanted, ``SystemExit``
     |      needs to be caught.
     |      
     |      This method is also available by directly calling the instance of
     |      a :class:`Command`.
     |      
     |      .. versionadded:: 3.0
     |         Added the `standalone_mode` flag to control the standalone mode.
     |      
     |      :param args: the arguments that should be used for parsing.  If not
     |                   provided, ``sys.argv[1:]`` is used.
     |      :param prog_name: the program name that should be used.  By default
     |                        the program name is constructed by taking the file
     |                        name from ``sys.argv[0]``.
     |      :param complete_var: the environment variable that controls the
     |                           bash completion support.  The default is
     |                           ``"_<prog_name>_COMPLETE"`` with prog name in
     |                           uppercase.
     |      :param standalone_mode: the default behavior is to invoke the script
     |                              in standalone mode.  Click will then
     |                              handle exceptions and convert them into
     |                              error messages and the function will never
     |                              return but shut down the interpreter.  If
     |                              this is set to `False` they will be
     |                              propagated to the caller and the return
     |                              value of this function is the return value
     |                              of :meth:`invoke`.
     |      :param extra: extra keyword arguments are forwarded to the context
     |                    constructor.  See :class:`Context` for more information.
     |  
     |  make_context(self, info_name, args, parent=None, **extra)
     |      This function when given an info name and arguments will kick
     |      off the parsing and create a new :class:`Context`.  It does not
     |      invoke the actual command callback though.
     |      
     |      :param info_name: the info name for this invokation.  Generally this
     |                        is the most descriptive name for the script or
     |                        command.  For the toplevel script it's usually
     |                        the name of the script, for commands below it it's
     |                        the name of the script.
     |      :param args: the arguments to parse as list of strings.
     |      :param parent: the parent context if available.
     |      :param extra: extra keyword arguments forwarded to the context
     |                    constructor.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseCommand:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseCommand:
     |  
     |  ignore_unknown_options = False
    
    class NoSuchOption(UsageError)
     |  Raised if click attempted to handle an option that does not
     |  exist.
     |  
     |  .. versionadded:: 4.0
     |  
     |  Method resolution order:
     |      NoSuchOption
     |      UsageError
     |      ClickException
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, option_name, message=None, possibilities=None, ctx=None)
     |  
     |  format_message(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UsageError:
     |  
     |  show(self, file=None)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from UsageError:
     |  
     |  exit_code = 2
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ClickException:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class Option(Parameter)
     |  Options are usually optional values on the command line and
     |  have some extra features that arguments don't have.
     |  
     |  All other parameters are passed onwards to the parameter constructor.
     |  
     |  :param show_default: controls if the default value should be shown on the
     |                       help page.  Normally, defaults are not shown.
     |  :param prompt: if set to `True` or a non empty string then the user will
     |                 be prompted for input if not set.  If set to `True` the
     |                 prompt will be the option name capitalized.
     |  :param confirmation_prompt: if set then the value will need to be confirmed
     |                              if it was prompted for.
     |  :param hide_input: if this is `True` then the input on the prompt will be
     |                     hidden from the user.  This is useful for password
     |                     input.
     |  :param is_flag: forces this option to act as a flag.  The default is
     |                  auto detection.
     |  :param flag_value: which value should be used for this flag if it's
     |                     enabled.  This is set to a boolean automatically if
     |                     the option string contains a slash to mark two options.
     |  :param multiple: if this is set to `True` then the argument is accepted
     |                   multiple times and recorded.  This is similar to ``nargs``
     |                   in how it works but supports arbitrary number of
     |                   arguments.
     |  :param count: this flag makes an option increment an integer.
     |  :param allow_from_autoenv: if this is enabled then the value of this
     |                             parameter will be pulled from an environment
     |                             variable in case a prefix is defined on the
     |                             context.
     |  :param help: the help string.
     |  
     |  Method resolution order:
     |      Option
     |      Parameter
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, param_decls=None, show_default=False, prompt=False, confirmation_prompt=False, hide_input=False, is_flag=None, flag_value=None, multiple=False, count=False, allow_from_autoenv=True, type=None, help=None, **attrs)
     |  
     |  add_to_parser(self, parser, ctx)
     |  
     |  full_process_value(self, ctx, value)
     |  
     |  get_default(self, ctx)
     |  
     |  get_help_record(self, ctx)
     |  
     |  prompt_for_value(self, ctx)
     |      This is an alternative flow that can be activated in the full
     |      value processing if a value does not exist.  It will prompt the
     |      user until a valid value exists and then returns the processed
     |      value as result.
     |  
     |  resolve_envvar_value(self, ctx)
     |  
     |  value_from_envvar(self, ctx)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  param_type_name = 'option'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Parameter:
     |  
     |  consume_value(self, ctx, opts)
     |  
     |  get_usage_pieces(self, ctx)
     |  
     |  handle_parse_result(self, ctx, opts, args)
     |  
     |  make_metavar(self)
     |  
     |  process_value(self, ctx, value)
     |      Given a value and context this runs the logic to convert the
     |      value as necessary.
     |  
     |  type_cast_value(self, ctx, value)
     |      Given a value this runs it properly through the type system.
     |      This automatically handles things like `nargs` and `multiple` as
     |      well as composite types.
     |  
     |  value_is_missing(self, value)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Parameter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  human_readable_name
     |      Returns the human readable name of this parameter.  This is the
     |      same as the name for options, but the metavar for arguments.
    
    class OptionParser(__builtin__.object)
     |  The option parser is an internal class that is ultimately used to
     |  parse options and arguments.  It's modelled after optparse and brings
     |  a similar but vastly simplified API.  It should generally not be used
     |  directly as the high level Click classes wrap it for you.
     |  
     |  It's not nearly as extensible as optparse or argparse as it does not
     |  implement features that are implemented on a higher level (such as
     |  types or defaults).
     |  
     |  :param ctx: optionally the :class:`~click.Context` where this parser
     |              should go with.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, ctx=None)
     |  
     |  add_argument(self, dest, nargs=1, obj=None)
     |      Adds a positional argument named `dest` to the parser.
     |      
     |      The `obj` can be used to identify the option in the order list
     |      that is returned from the parser.
     |  
     |  add_option(self, opts, dest, action=None, nargs=1, const=None, obj=None)
     |      Adds a new option named `dest` to the parser.  The destination
     |      is not inferred (unlike with optparse) and needs to be explicitly
     |      provided.  Action can be any of ``store``, ``store_const``,
     |      ``append``, ``appnd_const`` or ``count``.
     |      
     |      The `obj` can be used to identify the option in the order list
     |      that is returned from the parser.
     |  
     |  parse_args(self, args)
     |      Parses positional arguments and returns ``(values, args, order)``
     |      for the parsed options and arguments as well as the leftover
     |      arguments if there are any.  The order is a list of objects as they
     |      appear on the command line.  If arguments appear multiple times they
     |      will be memorized multiple times as well.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ParamType(__builtin__.object)
     |  Helper for converting values through types.  The following is
     |  necessary for a valid type:
     |  
     |  *   it needs a name
     |  *   it needs to pass through None unchanged
     |  *   it needs to convert from a string
     |  *   it needs to convert its result type through unchanged
     |      (eg: needs to be idempotent)
     |  *   it needs to be able to deal with param and context being `None`.
     |      This can be the case when the object is used with prompt
     |      inputs.
     |  
     |  Methods defined here:
     |  
     |  __call__(self, value, param=None, ctx=None)
     |  
     |  convert(self, value, param, ctx)
     |      Converts the value.  This is not invoked for values that are
     |      `None` (the missing value).
     |  
     |  fail(self, message, param=None, ctx=None)
     |      Helper method to fail with an invalid value message.
     |  
     |  get_metavar(self, param)
     |      Returns the metavar default for this param if it provides one.
     |  
     |  get_missing_message(self, param)
     |      Optionally might return extra information about a missing
     |      parameter.
     |      
     |      .. versionadded:: 2.0
     |  
     |  split_envvar_value(self, rv)
     |      Given a value from an environment variable this splits it up
     |      into small chunks depending on the defined envvar list splitter.
     |      
     |      If the splitter is set to `None`, which means that whitespace splits,
     |      then leading and trailing whitespace is ignored.  Otherwise, leading
     |      and trailing splitters usually lead to empty items being included.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  envvar_list_splitter = None
     |  
     |  is_composite = False
     |  
     |  name = None
    
    class Parameter(__builtin__.object)
     |  A parameter to a command comes in two versions: they are either
     |  :class:`Option`\s or :class:`Argument`\s.  Other subclasses are currently
     |  not supported by design as some of the internals for parsing are
     |  intentionally not finalized.
     |  
     |  Some settings are supported by both options and arguments.
     |  
     |  .. versionchanged:: 2.0
     |     Changed signature for parameter callback to also be passed the
     |     parameter.  In Click 2.0, the old callback format will still work,
     |     but it will raise a warning to give you change to migrate the
     |     code easier.
     |  
     |  :param param_decls: the parameter declarations for this option or
     |                      argument.  This is a list of flags or argument
     |                      names.
     |  :param type: the type that should be used.  Either a :class:`ParamType`
     |               or a Python type.  The later is converted into the former
     |               automatically if supported.
     |  :param required: controls if this is optional or not.
     |  :param default: the default value if omitted.  This can also be a callable,
     |                  in which case it's invoked when the default is needed
     |                  without any arguments.
     |  :param callback: a callback that should be executed after the parameter
     |                   was matched.  This is called as ``fn(ctx, param,
     |                   value)`` and needs to return the value.  Before Click
     |                   2.0, the signature was ``(ctx, value)``.
     |  :param nargs: the number of arguments to match.  If not ``1`` the return
     |                value is a tuple instead of single value.  The default for
     |                nargs is ``1`` (except if the type is a tuple, then it's
     |                the arity of the tuple).
     |  :param metavar: how the value is represented in the help page.
     |  :param expose_value: if this is `True` then the value is passed onwards
     |                       to the command callback and stored on the context,
     |                       otherwise it's skipped.
     |  :param is_eager: eager values are processed before non eager ones.  This
     |                   should not be set for arguments or it will inverse the
     |                   order of processing.
     |  :param envvar: a string or list of strings that are environment variables
     |                 that should be checked.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, param_decls=None, type=None, required=False, default=None, callback=None, nargs=None, metavar=None, expose_value=True, is_eager=False, envvar=None)
     |  
     |  add_to_parser(self, parser, ctx)
     |  
     |  consume_value(self, ctx, opts)
     |  
     |  full_process_value(self, ctx, value)
     |  
     |  get_default(self, ctx)
     |      Given a context variable this calculates the default value.
     |  
     |  get_help_record(self, ctx)
     |  
     |  get_usage_pieces(self, ctx)
     |  
     |  handle_parse_result(self, ctx, opts, args)
     |  
     |  make_metavar(self)
     |  
     |  process_value(self, ctx, value)
     |      Given a value and context this runs the logic to convert the
     |      value as necessary.
     |  
     |  resolve_envvar_value(self, ctx)
     |  
     |  type_cast_value(self, ctx, value)
     |      Given a value this runs it properly through the type system.
     |      This automatically handles things like `nargs` and `multiple` as
     |      well as composite types.
     |  
     |  value_from_envvar(self, ctx)
     |  
     |  value_is_missing(self, value)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  human_readable_name
     |      Returns the human readable name of this parameter.  This is the
     |      same as the name for options, but the metavar for arguments.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  param_type_name = 'parameter'
    
    class Path(ParamType)
     |  The path type is similar to the :class:`File` type but it performs
     |  different checks.  First of all, instead of returning an open file
     |  handle it returns just the filename.  Secondly, it can perform various
     |  basic checks about what the file or directory should be.
     |  
     |  .. versionchanged:: 6.0
     |     `allow_dash` was added.
     |  
     |  :param exists: if set to true, the file or directory needs to exist for
     |                 this value to be valid.  If this is not required and a
     |                 file does indeed not exist, then all further checks are
     |                 silently skipped.
     |  :param file_okay: controls if a file is a possible value.
     |  :param dir_okay: controls if a directory is a possible value.
     |  :param writable: if true, a writable check is performed.
     |  :param readable: if true, a readable check is performed.
     |  :param resolve_path: if this is true, then the path is fully resolved
     |                       before the value is passed onwards.  This means
     |                       that it's absolute and symlinks are resolved.
     |  :param allow_dash: If this is set to `True`, a single dash to indicate
     |                     standard streams is permitted.
     |  :param type: optionally a string type that should be used to
     |               represent the path.  The default is `None` which
     |               means the return value will be either bytes or
     |               unicode depending on what makes most sense given the
     |               input data Click deals with.
     |  
     |  Method resolution order:
     |      Path
     |      ParamType
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, exists=False, file_okay=True, dir_okay=True, writable=False, readable=True, resolve_path=False, allow_dash=False, path_type=None)
     |  
     |  coerce_path_result(self, rv)
     |  
     |  convert(self, value, param, ctx)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  envvar_list_splitter = ';'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ParamType:
     |  
     |  __call__(self, value, param=None, ctx=None)
     |  
     |  fail(self, message, param=None, ctx=None)
     |      Helper method to fail with an invalid value message.
     |  
     |  get_metavar(self, param)
     |      Returns the metavar default for this param if it provides one.
     |  
     |  get_missing_message(self, param)
     |      Optionally might return extra information about a missing
     |      parameter.
     |      
     |      .. versionadded:: 2.0
     |  
     |  split_envvar_value(self, rv)
     |      Given a value from an environment variable this splits it up
     |      into small chunks depending on the defined envvar list splitter.
     |      
     |      If the splitter is set to `None`, which means that whitespace splits,
     |      then leading and trailing whitespace is ignored.  Otherwise, leading
     |      and trailing splitters usually lead to empty items being included.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ParamType:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ParamType:
     |  
     |  is_composite = False
     |  
     |  name = None
    
    class Tuple(CompositeParamType)
     |  The default behavior of Click is to apply a type on a value directly.
     |  This works well in most cases, except for when `nargs` is set to a fixed
     |  count and different types should be used for different items.  In this
     |  case the :class:`Tuple` type can be used.  This type can only be used
     |  if `nargs` is set to a fixed number.
     |  
     |  For more information see :ref:`tuple-type`.
     |  
     |  This can be selected by using a Python tuple literal as a type.
     |  
     |  :param types: a list of types that should be used for the tuple items.
     |  
     |  Method resolution order:
     |      Tuple
     |      CompositeParamType
     |      ParamType
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, types)
     |  
     |  convert(self, value, param, ctx)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  arity
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from CompositeParamType:
     |  
     |  is_composite = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ParamType:
     |  
     |  __call__(self, value, param=None, ctx=None)
     |  
     |  fail(self, message, param=None, ctx=None)
     |      Helper method to fail with an invalid value message.
     |  
     |  get_metavar(self, param)
     |      Returns the metavar default for this param if it provides one.
     |  
     |  get_missing_message(self, param)
     |      Optionally might return extra information about a missing
     |      parameter.
     |      
     |      .. versionadded:: 2.0
     |  
     |  split_envvar_value(self, rv)
     |      Given a value from an environment variable this splits it up
     |      into small chunks depending on the defined envvar list splitter.
     |      
     |      If the splitter is set to `None`, which means that whitespace splits,
     |      then leading and trailing whitespace is ignored.  Otherwise, leading
     |      and trailing splitters usually lead to empty items being included.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ParamType:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ParamType:
     |  
     |  envvar_list_splitter = None
    
    class UsageError(ClickException)
     |  An internal exception that signals a usage error.  This typically
     |  aborts any further handling.
     |  
     |  :param message: the error message to display.
     |  :param ctx: optionally the context that caused this error.  Click will
     |              fill in the context automatically in some situations.
     |  
     |  Method resolution order:
     |      UsageError
     |      ClickException
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, message, ctx=None)
     |  
     |  show(self, file=None)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  exit_code = 2
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ClickException:
     |  
     |  format_message(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ClickException:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message

FUNCTIONS
    argument(*param_decls, **attrs)
        Attaches an argument to the command.  All positional arguments are
        passed as parameter declarations to :class:`Argument`; all keyword
        arguments are forwarded unchanged (except ``cls``).
        This is equivalent to creating an :class:`Argument` instance manually
        and attaching it to the :attr:`Command.params` list.
        
        :param cls: the argument class to instantiate.  This defaults to
                    :class:`Argument`.
    
    clear()
        Clears the terminal screen.  This will have the effect of clearing
        the whole visible space of the terminal and moving the cursor to the
        top left.  This does not do anything if not connected to a terminal.
        
        .. versionadded:: 2.0
    
    command(name=None, cls=None, **attrs)
        Creates a new :class:`Command` and uses the decorated function as
        callback.  This will also automatically attach all decorated
        :func:`option`\s and :func:`argument`\s as parameters to the command.
        
        The name of the command defaults to the name of the function.  If you
        want to change that, you can pass the intended name as the first
        argument.
        
        All keyword arguments are forwarded to the underlying command class.
        
        Once decorated the function turns into a :class:`Command` instance
        that can be invoked as a command line utility or be attached to a
        command :class:`Group`.
        
        :param name: the name of the command.  This defaults to the function
                     name.
        :param cls: the command class to instantiate.  This defaults to
                    :class:`Command`.
    
    confirm(text, default=False, abort=False, prompt_suffix=': ', show_default=True, err=False)
        Prompts for confirmation (yes/no question).
        
        If the user aborts the input by sending a interrupt signal this
        function will catch it and raise a :exc:`Abort` exception.
        
        .. versionadded:: 4.0
           Added the `err` parameter.
        
        :param text: the question to ask.
        :param default: the default for the prompt.
        :param abort: if this is set to `True` a negative answer aborts the
                      exception by raising :exc:`Abort`.
        :param prompt_suffix: a suffix that should be added to the prompt.
        :param show_default: shows or hides the default value in the prompt.
        :param err: if set to true the file defaults to ``stderr`` instead of
                    ``stdout``, the same as with echo.
    
    confirmation_option(*param_decls, **attrs)
        Shortcut for confirmation prompts that can be ignored by passing
        ``--yes`` as parameter.
        
        This is equivalent to decorating a function with :func:`option` with
        the following parameters::
        
            def callback(ctx, param, value):
                if not value:
                    ctx.abort()
        
            @click.command()
            @click.option('--yes', is_flag=True, callback=callback,
                          expose_value=False, prompt='Do you want to continue?')
            def dropdb():
                pass
    
    echo(message=None, file=None, nl=True, err=False, color=None)
        Prints a message plus a newline to the given file or stdout.  On
        first sight, this looks like the print function, but it has improved
        support for handling Unicode and binary data that does not fail no
        matter how badly configured the system is.
        
        Primarily it means that you can print binary data as well as Unicode
        data on both 2.x and 3.x to the given file in the most appropriate way
        possible.  This is a very carefree function as in that it will try its
        best to not fail.  As of Click 6.0 this includes support for unicode
        output on the Windows console.
        
        In addition to that, if `colorama`_ is installed, the echo function will
        also support clever handling of ANSI codes.  Essentially it will then
        do the following:
        
        -   add transparent handling of ANSI color codes on Windows.
        -   hide ANSI codes automatically if the destination file is not a
            terminal.
        
        .. _colorama: http://pypi.python.org/pypi/colorama
        
        .. versionchanged:: 6.0
           As of Click 6.0 the echo function will properly support unicode
           output on the windows console.  Not that click does not modify
           the interpreter in any way which means that `sys.stdout` or the
           print statement or function will still not provide unicode support.
        
        .. versionchanged:: 2.0
           Starting with version 2.0 of Click, the echo function will work
           with colorama if it's installed.
        
        .. versionadded:: 3.0
           The `err` parameter was added.
        
        .. versionchanged:: 4.0
           Added the `color` flag.
        
        :param message: the message to print
        :param file: the file to write to (defaults to ``stdout``)
        :param err: if set to true the file defaults to ``stderr`` instead of
                    ``stdout``.  This is faster and easier than calling
                    :func:`get_text_stderr` yourself.
        :param nl: if set to `True` (the default) a newline is printed afterwards.
        :param color: controls if the terminal supports ANSI colors or not.  The
                      default is autodetection.
    
    echo_via_pager(text, color=None)
        This function takes a text and shows it via an environment specific
        pager on stdout.
        
        .. versionchanged:: 3.0
           Added the `color` flag.
        
        :param text: the text to page.
        :param color: controls if the pager supports ANSI colors or not.  The
                      default is autodetection.
    
    edit(text=None, editor=None, env=None, require_save=True, extension='.txt', filename=None)
        Edits the given text in the defined editor.  If an editor is given
        (should be the full path to the executable but the regular operating
        system search path is used for finding the executable) it overrides
        the detected editor.  Optionally, some environment variables can be
        used.  If the editor is closed without changes, `None` is returned.  In
        case a file is edited directly the return value is always `None` and
        `require_save` and `extension` are ignored.
        
        If the editor cannot be opened a :exc:`UsageError` is raised.
        
        Note for Windows: to simplify cross-platform usage, the newlines are
        automatically converted from POSIX to Windows and vice versa.  As such,
        the message here will have ``\n`` as newline markers.
        
        :param text: the text to edit.
        :param editor: optionally the editor to use.  Defaults to automatic
                       detection.
        :param env: environment variables to forward to the editor.
        :param require_save: if this is true, then not saving in the editor
                             will make the return value become `None`.
        :param extension: the extension to tell the editor about.  This defaults
                          to `.txt` but changing this might change syntax
                          highlighting.
        :param filename: if provided it will edit this file instead of the
                         provided text contents.  It will not use a temporary
                         file as an indirection in that case.
    
    format_filename(filename, shorten=False)
        Formats a filename for user display.  The main purpose of this
        function is to ensure that the filename can be displayed at all.  This
        will decode the filename to unicode if necessary in a way that it will
        not fail.  Optionally, it can shorten the filename to not include the
        full path to the filename.
        
        :param filename: formats a filename for UI display.  This will also convert
                         the filename into unicode without failing.
        :param shorten: this optionally shortens the filename to strip of the
                        path that leads up to it.
    
    get_app_dir(app_name, roaming=True, force_posix=False)
        Returns the config folder for the application.  The default behavior
        is to return whatever is most appropriate for the operating system.
        
        To give you an idea, for an app called ``"Foo Bar"``, something like
        the following folders could be returned:
        
        Mac OS X:
          ``~/Library/Application Support/Foo Bar``
        Mac OS X (POSIX):
          ``~/.foo-bar``
        Unix:
          ``~/.config/foo-bar``
        Unix (POSIX):
          ``~/.foo-bar``
        Win XP (roaming):
          ``C:\Documents and Settings\<user>\Local Settings\Application Data\Foo Bar``
        Win XP (not roaming):
          ``C:\Documents and Settings\<user>\Application Data\Foo Bar``
        Win 7 (roaming):
          ``C:\Users\<user>\AppData\Roaming\Foo Bar``
        Win 7 (not roaming):
          ``C:\Users\<user>\AppData\Local\Foo Bar``
        
        .. versionadded:: 2.0
        
        :param app_name: the application name.  This should be properly capitalized
                         and can contain whitespace.
        :param roaming: controls if the folder should be roaming or not on Windows.
                        Has no affect otherwise.
        :param force_posix: if this is set to `True` then on any POSIX system the
                            folder will be stored in the home folder with a leading
                            dot instead of the XDG config home or darwin's
                            application support folder.
    
    get_binary_stream(name)
        Returns a system stream for byte processing.  This essentially
        returns the stream from the sys module with the given name but it
        solves some compatibility issues between different Python versions.
        Primarily this function is necessary for getting binary streams on
        Python 3.
        
        :param name: the name of the stream to open.  Valid names are ``'stdin'``,
                     ``'stdout'`` and ``'stderr'``
    
    get_current_context(silent=False)
        Returns the current click context.  This can be used as a way to
        access the current context object from anywhere.  This is a more implicit
        alternative to the :func:`pass_context` decorator.  This function is
        primarily useful for helpers such as :func:`echo` which might be
        interested in changing it's behavior based on the current context.
        
        To push the current context, :meth:`Context.scope` can be used.
        
        .. versionadded:: 5.0
        
        :param silent: is set to `True` the return value is `None` if no context
                       is available.  The default behavior is to raise a
                       :exc:`RuntimeError`.
    
    get_os_args()
        This returns the argument part of sys.argv in the most appropriate
        form for processing.  What this means is that this return value is in
        a format that works for Click to process but does not necessarily
        correspond well to what's actually standard for the interpreter.
        
        On most environments the return value is ``sys.argv[:1]`` unchanged.
        However if you are on Windows and running Python 2 the return value
        will actually be a list of unicode strings instead because the
        default behavior on that platform otherwise will not be able to
        carry all possible values that sys.argv can have.
        
        .. versionadded:: 6.0
    
    get_terminal_size()
        Returns the current size of the terminal as tuple in the form
        ``(width, height)`` in columns and rows.
    
    get_text_stream(name, encoding=None, errors='strict')
        Returns a system stream for text processing.  This usually returns
        a wrapped stream around a binary stream returned from
        :func:`get_binary_stream` but it also can take shortcuts on Python 3
        for already correctly configured streams.
        
        :param name: the name of the stream to open.  Valid names are ``'stdin'``,
                     ``'stdout'`` and ``'stderr'``
        :param encoding: overrides the detected default encoding.
        :param errors: overrides the default error mode.
    
    getchar(echo=False)
        Fetches a single character from the terminal and returns it.  This
        will always return a unicode character and under certain rare
        circumstances this might return more than one character.  The
        situations which more than one character is returned is when for
        whatever reason multiple characters end up in the terminal buffer or
        standard input was not actually a terminal.
        
        Note that this will always read from the terminal, even if something
        is piped into the standard input.
        
        .. versionadded:: 2.0
        
        :param echo: if set to `True`, the character read will also show up on
                     the terminal.  The default is to not show it.
    
    group(name=None, **attrs)
        Creates a new :class:`Group` with a function as callback.  This
        works otherwise the same as :func:`command` just that the `cls`
        parameter is set to :class:`Group`.
    
    help_option(*param_decls, **attrs)
        Adds a ``--help`` option which immediately ends the program
        printing out the help page.  This is usually unnecessary to add as
        this is added by default to all commands unless suppressed.
        
        Like :func:`version_option`, this is implemented as eager option that
        prints in the callback and exits.
        
        All arguments are forwarded to :func:`option`.
    
    launch(url, wait=False, locate=False)
        This function launches the given URL (or filename) in the default
        viewer application for this file type.  If this is an executable, it
        might launch the executable in a new session.  The return value is
        the exit code of the launched application.  Usually, ``0`` indicates
        success.
        
        Examples::
        
            click.launch('http://click.pocoo.org/')
            click.launch('/my/downloaded/file', locate=True)
        
        .. versionadded:: 2.0
        
        :param url: URL or filename of the thing to launch.
        :param wait: waits for the program to stop.
        :param locate: if this is set to `True` then instead of launching the
                       application associated with the URL it will attempt to
                       launch a file manager with the file located.  This
                       might have weird effects if the URL does not point to
                       the filesystem.
    
    make_pass_decorator(object_type, ensure=False)
        Given an object type this creates a decorator that will work
        similar to :func:`pass_obj` but instead of passing the object of the
        current context, it will find the innermost context of type
        :func:`object_type`.
        
        This generates a decorator that works roughly like this::
        
            from functools import update_wrapper
        
            def decorator(f):
                @pass_context
                def new_func(ctx, *args, **kwargs):
                    obj = ctx.find_object(object_type)
                    return ctx.invoke(f, obj, *args, **kwargs)
                return update_wrapper(new_func, f)
            return decorator
        
        :param object_type: the type of the object to pass.
        :param ensure: if set to `True`, a new object will be created and
                       remembered on the context if it's not there yet.
    
    open_file(filename, mode='r', encoding=None, errors='strict', lazy=False, atomic=False)
        This is similar to how the :class:`File` works but for manual
        usage.  Files are opened non lazy by default.  This can open regular
        files as well as stdin/stdout if ``'-'`` is passed.
        
        If stdin/stdout is returned the stream is wrapped so that the context
        manager will not close the stream accidentally.  This makes it possible
        to always use the function like this without having to worry to
        accidentally close a standard stream::
        
            with open_file(filename) as f:
                ...
        
        .. versionadded:: 3.0
        
        :param filename: the name of the file to open (or ``'-'`` for stdin/stdout).
        :param mode: the mode in which to open the file.
        :param encoding: the encoding to use.
        :param errors: the error handling for this file.
        :param lazy: can be flipped to true to open the file lazily.
        :param atomic: in atomic mode writes go into a temporary file and it's
                       moved on close.
    
    option(*param_decls, **attrs)
        Attaches an option to the command.  All positional arguments are
        passed as parameter declarations to :class:`Option`; all keyword
        arguments are forwarded unchanged (except ``cls``).
        This is equivalent to creating an :class:`Option` instance manually
        and attaching it to the :attr:`Command.params` list.
        
        :param cls: the option class to instantiate.  This defaults to
                    :class:`Option`.
    
    pass_context(f)
        Marks a callback as wanting to receive the current context
        object as first argument.
    
    pass_obj(f)
        Similar to :func:`pass_context`, but only pass the object on the
        context onwards (:attr:`Context.obj`).  This is useful if that object
        represents the state of a nested system.
    
    password_option(*param_decls, **attrs)
        Shortcut for password prompts.
        
        This is equivalent to decorating a function with :func:`option` with
        the following parameters::
        
            @click.command()
            @click.option('--password', prompt=True, confirmation_prompt=True,
                          hide_input=True)
            def changeadmin(password):
                pass
    
    pause(info='Press any key to continue ...', err=False)
        This command stops execution and waits for the user to press any
        key to continue.  This is similar to the Windows batch "pause"
        command.  If the program is not run through a terminal, this command
        will instead do nothing.
        
        .. versionadded:: 2.0
        
        .. versionadded:: 4.0
           Added the `err` parameter.
        
        :param info: the info string to print before pausing.
        :param err: if set to message goes to ``stderr`` instead of
                    ``stdout``, the same as with echo.
    
    progressbar(iterable=None, length=None, label=None, show_eta=True, show_percent=None, show_pos=False, item_show_func=None, fill_char='#', empty_char='-', bar_template='%(label)s  [%(bar)s]  %(info)s', info_sep='  ', width=36, file=None, color=None)
        This function creates an iterable context manager that can be used
        to iterate over something while showing a progress bar.  It will
        either iterate over the `iterable` or `length` items (that are counted
        up).  While iteration happens, this function will print a rendered
        progress bar to the given `file` (defaults to stdout) and will attempt
        to calculate remaining time and more.  By default, this progress bar
        will not be rendered if the file is not a terminal.
        
        The context manager creates the progress bar.  When the context
        manager is entered the progress bar is already displayed.  With every
        iteration over the progress bar, the iterable passed to the bar is
        advanced and the bar is updated.  When the context manager exits,
        a newline is printed and the progress bar is finalized on screen.
        
        No printing must happen or the progress bar will be unintentionally
        destroyed.
        
        Example usage::
        
            with progressbar(items) as bar:
                for item in bar:
                    do_something_with(item)
        
        Alternatively, if no iterable is specified, one can manually update the
        progress bar through the `update()` method instead of directly
        iterating over the progress bar.  The update method accepts the number
        of steps to increment the bar with::
        
            with progressbar(length=chunks.total_bytes) as bar:
                for chunk in chunks:
                    process_chunk(chunk)
                    bar.update(chunks.bytes)
        
        .. versionadded:: 2.0
        
        .. versionadded:: 4.0
           Added the `color` parameter.  Added a `update` method to the
           progressbar object.
        
        :param iterable: an iterable to iterate over.  If not provided the length
                         is required.
        :param length: the number of items to iterate over.  By default the
                       progressbar will attempt to ask the iterator about its
                       length, which might or might not work.  If an iterable is
                       also provided this parameter can be used to override the
                       length.  If an iterable is not provided the progress bar
                       will iterate over a range of that length.
        :param label: the label to show next to the progress bar.
        :param show_eta: enables or disables the estimated time display.  This is
                         automatically disabled if the length cannot be
                         determined.
        :param show_percent: enables or disables the percentage display.  The
                             default is `True` if the iterable has a length or
                             `False` if not.
        :param show_pos: enables or disables the absolute position display.  The
                         default is `False`.
        :param item_show_func: a function called with the current item which
                               can return a string to show the current item
                               next to the progress bar.  Note that the current
                               item can be `None`!
        :param fill_char: the character to use to show the filled part of the
                          progress bar.
        :param empty_char: the character to use to show the non-filled part of
                           the progress bar.
        :param bar_template: the format string to use as template for the bar.
                             The parameters in it are ``label`` for the label,
                             ``bar`` for the progress bar and ``info`` for the
                             info section.
        :param info_sep: the separator between multiple info items (eta etc.)
        :param width: the width of the progress bar in characters, 0 means full
                      terminal width
        :param file: the file to write to.  If this is not a terminal then
                     only the label is printed.
        :param color: controls if the terminal supports ANSI colors or not.  The
                      default is autodetection.  This is only needed if ANSI
                      codes are included anywhere in the progress bar output
                      which is not the case by default.
    
    prompt(text, default=None, hide_input=False, confirmation_prompt=False, type=None, value_proc=None, prompt_suffix=': ', show_default=True, err=False)
        Prompts a user for input.  This is a convenience function that can
        be used to prompt a user for input later.
        
        If the user aborts the input by sending a interrupt signal, this
        function will catch it and raise a :exc:`Abort` exception.
        
        .. versionadded:: 6.0
           Added unicode support for cmd.exe on Windows.
        
        .. versionadded:: 4.0
           Added the `err` parameter.
        
        :param text: the text to show for the prompt.
        :param default: the default value to use if no input happens.  If this
                        is not given it will prompt until it's aborted.
        :param hide_input: if this is set to true then the input value will
                           be hidden.
        :param confirmation_prompt: asks for confirmation for the value.
        :param type: the type to use to check the value against.
        :param value_proc: if this parameter is provided it's a function that
                           is invoked instead of the type conversion to
                           convert a value.
        :param prompt_suffix: a suffix that should be added to the prompt.
        :param show_default: shows or hides the default value in the prompt.
        :param err: if set to true the file defaults to ``stderr`` instead of
                    ``stdout``, the same as with echo.
    
    secho(text, file=None, nl=True, err=False, color=None, **styles)
        This function combines :func:`echo` and :func:`style` into one
        call.  As such the following two calls are the same::
        
            click.secho('Hello World!', fg='green')
            click.echo(click.style('Hello World!', fg='green'))
        
        All keyword arguments are forwarded to the underlying functions
        depending on which one they go with.
        
        .. versionadded:: 2.0
    
    style(text, fg=None, bg=None, bold=None, dim=None, underline=None, blink=None, reverse=None, reset=True)
        Styles a text with ANSI styles and returns the new string.  By
        default the styling is self contained which means that at the end
        of the string a reset code is issued.  This can be prevented by
        passing ``reset=False``.
        
        Examples::
        
            click.echo(click.style('Hello World!', fg='green'))
            click.echo(click.style('ATTENTION!', blink=True))
            click.echo(click.style('Some things', reverse=True, fg='cyan'))
        
        Supported color names:
        
        * ``black`` (might be a gray)
        * ``red``
        * ``green``
        * ``yellow`` (might be an orange)
        * ``blue``
        * ``magenta``
        * ``cyan``
        * ``white`` (might be light gray)
        * ``reset`` (reset the color code only)
        
        .. versionadded:: 2.0
        
        :param text: the string to style with ansi codes.
        :param fg: if provided this will become the foreground color.
        :param bg: if provided this will become the background color.
        :param bold: if provided this will enable or disable bold mode.
        :param dim: if provided this will enable or disable dim mode.  This is
                    badly supported.
        :param underline: if provided this will enable or disable underline.
        :param blink: if provided this will enable or disable blinking.
        :param reverse: if provided this will enable or disable inverse
                        rendering (foreground becomes background and the
                        other way round).
        :param reset: by default a reset-all code is added at the end of the
                      string which means that styles do not carry over.  This
                      can be disabled to compose styles.
    
    unstyle(text)
        Removes ANSI styling information from a string.  Usually it's not
        necessary to use this function as Click's echo function will
        automatically remove styling if necessary.
        
        .. versionadded:: 2.0
        
        :param text: the text to remove style information from.
    
    version_option(version=None, *param_decls, **attrs)
        Adds a ``--version`` option which immediately ends the program
        printing out the version number.  This is implemented as an eager
        option that prints the version and exits the program in the callback.
        
        :param version: the version number to show.  If not provided Click
                        attempts an auto discovery via setuptools.
        :param prog_name: the name of the program (defaults to autodetection)
        :param message: custom message to show instead of the default
                        (``'%(prog)s, version %(version)s'``)
        :param others: everything else is forwarded to :func:`option`.
    
    wrap_text(text, width=78, initial_indent='', subsequent_indent='', preserve_paragraphs=False)
        A helper function that intelligently wraps text.  By default, it
        assumes that it operates on a single paragraph of text but if the
        `preserve_paragraphs` parameter is provided it will intelligently
        handle paragraphs (defined by two empty lines).
        
        If paragraphs are handled, a paragraph can be prefixed with an empty
        line containing the ``\b`` character (``\x08``) to indicate that
        no rewrapping should happen in that block.
        
        :param text: the text that should be rewrapped.
        :param width: the maximum width for the text.
        :param initial_indent: the initial indent that should be placed on the
                               first line as a string.
        :param subsequent_indent: the indent string that should be placed on
                                  each consecutive line.
        :param preserve_paragraphs: if this flag is set then the wrapping will
                                    intelligently handle paragraphs.

DATA
    BOOL = BOOL
    FLOAT = FLOAT
    INT = INT
    STRING = STRING
    UNPROCESSED = UNPROCESSED
    UUID = UUID
    __all__ = ['Context', 'BaseCommand', 'Command', 'MultiCommand', 'Group...
    __version__ = '6.7'

VERSION
    6.7


None



All Attribute:  ['Abort', 'Argument', 'BOOL', 'BadArgumentUsage', 'BadOptionUsage', 'BadParameter', 'BaseCommand', 'Choice', 'ClickException', 'Command', 'CommandCollection', 'Context', 'FLOAT', 'File', 'FileError', 'Group', 'HelpFormatter', 'INT', 'IntRange', 'MissingParameter', 'MultiCommand', 'NoSuchOption', 'Option', 'OptionParser', 'ParamType', 'Parameter', 'Path', 'STRING', 'Tuple', 'UNPROCESSED', 'UUID', 'UsageError', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__', '__version__', '_compat', '_unicodefun', '_winconsole', 'argument', 'clear', 'command', 'confirm', 'confirmation_option', 'core', 'decorators', 'disable_unicode_literals_warning', 'echo', 'echo_via_pager', 'edit', 'exceptions', 'format_filename', 'formatting', 'get_app_dir', 'get_binary_stream', 'get_current_context', 'get_os_args', 'get_terminal_size', 'get_text_stream', 'getchar', 'globals', 'group', 'help_option', 'launch', 'make_pass_decorator', 'open_file', 'option', 'parser', 'pass_context', 'pass_obj', 'password_option', 'pause', 'progressbar', 'prompt', 'secho', 'style', 'termui', 'types', 'unstyle', 'utils', 'version_option', 'wrap_text']
